// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Nivel {
  id        Int       @id @default(autoincrement())
  lecciones Leccion[]
}

model Leccion {
  id             Int           @id @default(autoincrement())
  title          String
  desc           String
  imgUrl         String?
  tipo           String
  nivelId        Int?
  nivel          Nivel?        @relation(fields: [nivelId], references: [id], onDelete: Cascade)
  cards          Card[]
  cuestionario   Cuestionario? @relation(fields: [cuestionarioId], references: [id])
  cuestionarioId Int?          @unique
}

model Cuestionario {
  id          Int                      @id @default(autoincrement())
  leccion     Leccion?                 @relation
  preguntas   Pregunta[]
  completados CuestionarioCompletado[]
}

model Pregunta {
  id             Int          @id @default(autoincrement())
  texto          String
  cuestionarioId Int
  cuestionario   Cuestionario @relation(fields: [cuestionarioId], references: [id], onDelete: Cascade)
  opciones       Opcion[]
}

model Opcion {
  id         Int      @id @default(autoincrement())
  texto      String
  esCorrecta Boolean
  preguntaId Int
  pregunta   Pregunta @relation(fields: [preguntaId], references: [id], onDelete: Cascade)
}

model Card {
  id        Int     @id @default(autoincrement())
  title     String
  content   String
  imageUrl  String?
  leccionId Int
  leccion   Leccion @relation(fields: [leccionId], references: [id], onDelete: Cascade)
}

model User {
  id                       Int                      @id @default(autoincrement())
  username                 String                   @unique
  email                    String                   @unique
  password                 String
  createdAt                DateTime                 @default(now())
  exp                      Int                      @default(0)
  nivel                    Int                      @default(1) 
  posts                    Post[]
  postLikes                PostLike[]
  cuestionariosCompletados CuestionarioCompletado[]
  actividadesCompletadas   ActividadCompletada[]    
  huerto                   Huerto?                  @relation
}

model CuestionarioCompletado {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  cuestionario   Cuestionario @relation(fields: [cuestionarioId], references: [id], onDelete: Cascade)
  cuestionarioId Int
  completadoEn   DateTime     @default(now())

  @@unique([userId, cuestionarioId])
}

model Post {
  id           Int        @id @default(autoincrement())
  title        String?
  content      String
  imageUrl     String?
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  parentPost   Post?      @relation("ReplyRelation", fields: [parentPostId], references: [id], onDelete: Cascade)
  parentPostId Int?
  replies      Post[]     @relation("ReplyRelation")
  likes        PostLike[]
}

model PostLike {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique([postId, userId])
}

model Actividad {
  id          Int                  @id @default(autoincrement())
  title       String
  desc        String
  nivelMin    Int                  
  tipo        String         @default("virtual")     
  exp         Int            @default(10)      
  completadas ActividadCompletada[] 
}

model ActividadCompletada {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  actividad    Actividad  @relation(fields: [actividadId], references: [id], onDelete: Cascade)
  actividadId  Int
  completadoEn DateTime   @default(now())

  @@unique([userId, actividadId]) 
}

model Huerto {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int       @unique
  light        Int       @default(50)
  water        Int       @default(50)
  nutrients    Int       @default(50)
  plants       Plant[]   // Relación uno a muchos con Plant
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model PlantType {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  light     Int
  water     Int
  nutrients Int
  images    String[]  
  plants    Plant[]   
}

model Plant {
  id           Int       @id @default(autoincrement())
  huerto       Huerto    @relation(fields: [huertoId], references: [id], onDelete: Cascade)
  huertoId     Int
  type         PlantType @relation(fields: [plantTypeId], references: [id])
  plantTypeId  Int       // Campo para la relación con PlantType
  growthStage  Int       @default(0) // Etapa de crecimiento (0 = semilla, 1 = crecimiento, 2 = madura, etc.)
  plantHealth  Int       @default(100)
  positionX    Int       // Posición X en el grid
  positionY    Int       // Posición Y en el grid
  plantedAt    DateTime  @default(now()) // Fecha de siembra
  lastWatered  DateTime? // Última vez que se regó
  lastHarvested DateTime? // Última vez que se cosechó
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}