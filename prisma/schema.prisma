// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Nivel {
  id        Int       @id @default(autoincrement())
  lecciones Leccion[]
}

model Leccion {
  id             Int           @id @default(autoincrement())
  title          String
  desc           String
  tipo           String
  orden          Int           @default(0)
  nivelId        Int?
  nivel          Nivel?        @relation(fields: [nivelId], references: [id], onDelete: Cascade)
  cards          Card[]
  infografia     Infografia?   @relation(fields: [infografiaId], references: [id])
  infografiaId   Int?          @unique
  cuestionario   Cuestionario? @relation(fields: [cuestionarioId], references: [id])
  cuestionarioId Int?          @unique
}

model Infografia {
  id              Int         @id @default(autoincrement())
  leccion         Leccion?    @relation
  leccionId       Int?        @unique
  backgroundImage String?
  elementos       InfografiaElemento[]
}

model InfografiaElemento {
  id           Int         @id @default(autoincrement())
  infografia   Infografia  @relation(fields: [infografiaId], references: [id])
  infografiaId Int
  tipo         String
  titulo       String?
  posicionX    Int
  posicionY    Int
  contenido    Json
  estilo       Json?
  interactivo  Boolean     @default(true)
  visible      Boolean     @default(true)
  orden        Int         @default(0)
  @@index([infografiaId, orden])
}

model Cuestionario {
  id          Int                      @id @default(autoincrement())
  leccion     Leccion?                 @relation
  preguntas   Pregunta[]
  completados CuestionarioCompletado[]
}

model Pregunta {
  id             Int          @id @default(autoincrement())
  texto          String
  cuestionarioId Int
  cuestionario   Cuestionario @relation(fields: [cuestionarioId], references: [id], onDelete: Cascade)
  opciones       Opcion[]
}

model Opcion {
  id         Int      @id @default(autoincrement())
  texto      String
  esCorrecta Boolean
  preguntaId Int
  pregunta   Pregunta @relation(fields: [preguntaId], references: [id], onDelete: Cascade)
}

model Card {
  id        Int     @id @default(autoincrement())
  title     String
  content   String
  imageUrl  String?
  orden     Int     @default(0) // Orden de aparición en la lección
  leccionId Int
  leccion   Leccion @relation(fields: [leccionId], references: [id], onDelete: Cascade)
}

model User {
  id                       Int                      @id @default(autoincrement())
  username                 String                   @unique
  email                    String                   @unique
  password                 String
  createdAt                DateTime                 @default(now())
  exp                      Int                      @default(0)
  nivel                    Int                      @default(1) 
  posts                    Post[]
  postLikes                PostLike[]
  cuestionariosCompletados CuestionarioCompletado[]
  actividadesCompletadas   ActividadCompletada[]    
  huerto                   Huerto?                  @relation
  points  Int      @default(0) // Puntos del usuario
  insignias                UserBadge[]              
  isAdmin                  Boolean                  @default(false)
}

model CuestionarioCompletado {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  cuestionario   Cuestionario @relation(fields: [cuestionarioId], references: [id], onDelete: Cascade)
  cuestionarioId Int
  completadoEn   DateTime     @default(now())

  @@unique([userId, cuestionarioId])
}

model Post {
  id           Int        @id @default(autoincrement())
  title        String?
  content      String
  imageUrl     String?
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  parentPost   Post?      @relation("ReplyRelation", fields: [parentPostId], references: [id], onDelete: Cascade)
  parentPostId Int?
  replies      Post[]     @relation("ReplyRelation")
  likes        PostLike[]
}

model PostLike {
  id     Int  @id @default(autoincrement())
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique([postId, userId])
}

model Actividad {
  id          Int                  @id @default(autoincrement())
  title       String
  desc        String
  nivelMin    Int                  
  tipo        String         @default("virtual")     
  exp         Int            @default(10)      
  evento      String?
  imageUrl    String?       
  completadas ActividadCompletada[] 
}

model ActividadCompletada {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  actividad    Actividad  @relation(fields: [actividadId], references: [id], onDelete: Cascade)
  actividadId  Int
  completadoEn DateTime   @default(now())

  @@unique([userId, actividadId]) 
}

model Huerto {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int          @unique
  controls       ControlFila[] // Relación uno a muchos con ControlFila
  simulationTime DateTime     @default(now())
  plants         Plant[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model ControlFila {
  id        Int    @id @default(autoincrement())
  filaIndex Int    // Índice de la fila (único por huerto)
  light     Int    // Valor de luz (0-100)
  water     Int    // Valor de agua (0-100)
  nutrients Int    // Valor de nutrientes (0-100)
  huerto    Huerto @relation(fields: [huertoId], references: [id], onDelete: Cascade)
  huertoId  Int    // Foreign key al Huerto

  @@unique([huertoId, filaIndex]) // Asegura que el índice de fila sea único por huerto
}

model PlantType {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  light          Int
  water          Int
  nutrients      Int
  growthDuration Int      @default(24) // Duración del crecimiento en horas
  images         String[]  
  plants         Plant[]   
  precio         Int       @default(0)
}

model Plant {
  id                 Int       @id @default(autoincrement())
  huerto             Huerto     @relation(fields: [huertoId], references: [id], onDelete: Cascade)
  huertoId           Int
  type               PlantType  @relation(fields: [plantTypeId], references: [id])
  plantTypeId        Int        // Campo para la relación con PlantType
  growthStage        Int        @default(0) // Etapa de crecimiento (0 = semilla, 1 = crecimiento, 2 = madura, etc.)
  plantHealth        Int        @default(100)
  positionX          Int        // Posición X en el grid
  positionY          Int        // Posición Y en el grid
  growthStartTime    DateTime   @default(now()) // Momento en que la planta comenzó a crecer
  lastGrowthUpdate   DateTime   @default(now()) // Última vez que se actualizó el crecimiento
  growthDuration     Int        @default(24) // Duración del crecimiento en horas (por defecto 24 horas)
  fruitProductionTime Int       @default(0) // Tiempo de producción de frutos en horas
  hasFruits          Boolean    @default(false) // Indica si la planta tiene frutos listos para cosechar
  status             String     @default("alive") // Estado de la planta (alive, dead)
  plantedAt          DateTime   @default(now()) // Fecha de siembra
  lastWatered        DateTime?  // Última vez que se regó
  lastHarvested      DateTime?  // Última vez que se cosechó
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model Badge {
  id          Int      @id @default(autoincrement())
  nombre      String   @unique
  imagen      String   // Ruta de la imagen de la insignia
  descripcion String?  // Descripción opcional de la insignia
  users       UserBadge[] // Relación muchos a muchos con usuarios
}

model UserBadge {
  id       Int    @id @default(autoincrement())
  userId   Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  badgeId  Int
  badge    Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  obtenidoEn DateTime @default(now()) // Fecha en que se obtuvo la insignia

  @@unique([userId, badgeId]) // Asegura que un usuario no pueda obtener la misma insignia más de una vez
}